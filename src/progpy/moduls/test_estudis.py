
# Generated by CodiumAI
from unittest.mock import patch

from unittest.mock import MagicMock
import sqlite3

from missatgeria import Curs

from missatgeria import Modalitat

from missatgeria import Etapa

from estudis import GeneradorArbreMateries


import pytest

class TestGeneradorArbreMateries:
    # Tests that the correct parameters are set when creating a new instance of GeneradorArbreMateries
    def test_correct_parameters(self):
        generador_test = GeneradorArbreMateries(0)
        generador_produccio = GeneradorArbreMateries(1)
        assert generador_test.ruta_arxiu_bbdd == arrel_tests
        assert generador_produccio.ruta_arxiu_bbdd == arrel_produccio


    # Tests that the method 'obtenir_nivells' returns the expected values
    def test_obtenir_nivells_returns_expected_values(self):
        generador = GeneradorArbreMateries(0)
        expected_output = [Etapa(1, 'Educació Infantil'), Etapa(2, 'Educació Primària'), Etapa(3, 'Educació Secundària Obligatòria'), Etapa(4, 'Batxillerat'), Etapa(5, 'Cicles Formatius de Grau Mitjà'), Etapa(6, 'Cicles Formatius de Grau Superior')]
        assert generador.obtenir_nivells() == expected_output


    # Tests that the method 'obtenir_modalitats' returns the expected values
    def test_obtenir_modalitats_returns_expected_values(self):
        generador = GeneradorArbreMateries(0)
        expected_modalitats = [Modalitat(1, 'Modalitat A'), Modalitat(2, 'Modalitat B'), Modalitat(3, 'Modalitat C')]
        assert generador.obtenir_modalitats() == expected_modalitats


    # Tests that the method 'obtenir_cursos_sense_modalitat' returns the expected values
    def test_obtenir_cursos_sense_modalitat(self):
        generador = GeneradorArbreMateries(0)
        cursos = generador.obtenir_cursos_sense_modalitat()
        assert len(cursos) == 3
        assert cursos[0].id == 1
        assert cursos[0].descripcio == '1r ESO - ESO'
        assert cursos[1].id == 2
        assert cursos[1].descripcio == '2n ESO - ESO'
        assert cursos[2].id == 3
        assert cursos[2].descripcio == '3r ESO - ESO'


    # Tests that the method 'obtenir_cursos_amb_modalitat' returns the expected values
    def test_obtenir_cursos_amb_modalitat_returns_expected_values(self):
        generador = GeneradorArbreMateries(0)
        expected_output = [Curs(1, '1r ESO - Educació Secundària Obligatòria'), Curs(2, '2n ESO - Educació Secundària Obligatòria'), Curs(3, '3r ESO - Educació Secundària Obligatòria'), Curs(4, '4t ESO - Educació Secundària Obligatòria')]
        assert generador.obtenir_cursos_amb_modalitat(1) == expected_output


    # Tests that an exception is raised when the database connection fails
    def test_database_connection_fails(self):
        with pytest.raises(Warning):
            generador = GeneradorArbreMateries(0)
            generador.conexio.close()
            generador.obtenir_nivells()


    # Tests that the 'obtenir_cursos_amb_modalitat' method raises an exception when the parameter is not an integer
    def test_obtenir_cursos_amb_modalitat_raises_exception_when_parameter_not_integer(self):
        generador = GeneradorArbreMateries(0)
        with pytest.raises(TypeError):
            generador.obtenir_cursos_amb_modalitat('not an integer')


    # Tests that the 'obtenir_materies_curs' method raises an exception when the parameter is not an integer
    def test_obtenir_materies_curs_raises_exception_when_parameter_not_integer(self):
        generador = GeneradorArbreMateries(0)
        with pytest.raises(TypeError):
            generador.obtenir_materies_curs('not an integer')


    # Tests that the method 'obtenir_nivells' returns an empty list when there are no values in the database
    def test_obtenir_nivells_returns_empty_list_when_no_values_in_database(self):
        generador = GeneradorArbreMateries(0)
        assert generador.obtenir_nivells() == []


    # Tests that the method 'obtenir_modalitats' returns an empty list when there are no values in the database
    def test_obtenir_modalitats_returns_empty_list_when_no_values_in_database(self):
        generador = GeneradorArbreMateries(0)
        assert generador.obtenir_modalitats() == []


    # Tests that the method 'obtenir_cursos_sense_modalitat' returns an empty list when there are \
    # no values in the database
    def test_obtenir_cursos_sense_modalitat_returns_empty_list_when_no_values_in_database(self):
        generador = GeneradorArbreMateries(0)
        assert generador.obtenir_cursos_sense_modalitat() == []


    # Tests that an exception is raised when the SQL query for obtenir_nivells() fails
    def test_obtenir_nivells_raises_exception_when_sql_query_fails(self):
        generador = GeneradorArbreMateries(0)
        with pytest.raises(Warning):
            generador.cursor.execute = MagicMock(side_effect=sqlite3.OperationalError)
            generador.obtenir_nivells()


    # Tests that an exception is raised when the SQL query for obtenir_modalitats() fails
    def test_obtenir_modalitats_raises_exception_when_sql_query_fails(self):
        generador = GeneradorArbreMateries(0)
        with pytest.raises(Warning):
            generador.cursor.execute = MagicMock(side_effect=sqlite3.OperationalError)
            generador.obtenir_modalitats()


    # Tests that an exception is raised when the SQL query for obtenir_cursos_sense_modalitat() fails
    def test_obtenir_cursos_sense_modalitat_raises_exception_when_sql_query_fails(self):
        generador = GeneradorArbreMateries(0)
        with patch.object(generador, 'cursor') as mock_cursor:
            mock_cursor.execute.side_effect = sqlite3.OperationalError('error message')
            with pytest.raises(Warning):
                generador.obtenir_cursos_sense_modalitat()


    # Tests that an exception is raised when the SQL query for obtenir_cursos_amb_modalitat() fails
    def test_obtenir_cursos_amb_modalitat_raises_exception_when_sql_query_fails(self):
        generador = GeneradorArbreMateries(0)
        with pytest.raises(sqlite3.OperationalError):
            generador.obtenir_cursos_amb_modalitat(999)

